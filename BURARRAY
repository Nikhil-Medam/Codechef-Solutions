#include<bits/stdc++.h>
#pragma GCC optimize ("-O3")
using namespace std;
#define IOS ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define endl "\n"
#define ll long long
#define int long long
#define double long double
#define pb push_back
#define max(a,b) (a>b?a:b)
#define min(a,b) (a<b?a:b)
#define diff(a,b) (a>b?a-b:b-a)
const int N=1e5+5;
void pairsort(int a[], int b[], int n){
    pair<int, int> pairt[n];
    for (int i = 0; i < n; i++) 
    {
        pairt[i].first = a[i];
        pairt[i].second = b[i];
    }
    sort(pairt, pairt + n);
    for (int i = 0; i < n; i++) 
    {
        a[i] = pairt[i].first;
        b[i] = pairt[i].second;
    }
}
int gcd(int a, int b){
    if (b == 0)
        return a;
    return gcd(b, a % b); 
}
int isPrime(int n){
    if(n < 2)
        return 0;
    if(n < 4)
        return 1;
    if(n % 2 == 0 or n % 3 == 0)
        return 0;
    for(int i = 5; i*i <= n; i += 6)
        if(n % i == 0 or n % (i+2) == 0)
            return 0;
    return 1;
}
long long C(int n, int r) {
    if(r>n-r) 
        r=n-r;
    long long ans=1;
    for(int i=1;i<=r;i++){
        ans*=n-r+i;
        ans/=i;
    }
    return ans;
}
int mod = 1e9+7;
int modexpo(int x,int p){
    int res = 1;
    x = x%mod;
    while(p){
        if(p%2)
            res = res * x;
        p >>= 1;
        x = x*x % mod;
        res %= mod;
    }
    return res;
}
int a[N],t[4*N],lazy[N],n,m,x,y,z,tt,q;
void BuildTree(int s,int e,int ind)
{
    if(s==e)
    {
        t[ind]=a[s];
        return;
    }
    //Recursive Case
    int mid=(s+e)/2;
    BuildTree(s,mid,2*ind);
    BuildTree(mid+1,e,2*ind+1);
    t[ind]=max(t[2*ind],t[2*ind+1]);
}
int query(int ss,int se,int qs,int qe,int ind)
{
    //Complete Overlap
    if(ss>=qs&&se<=qe)
        return t[ind];
    //No Overlap
    if(ss>qe||qs>se)
        return INT_MIN;
    //Partial Overlap
    int mid=(ss+se)/2;
    int lans=query(ss,mid,qs,qe,2*ind),rans=query(mid+1,se,qs,qe,2*ind+1);
    return max(lans,rans);
}
void updateNode(int s,int e,int x,int val,int ind)
{
    //No Overlap
    if(x>e||x<s)
        return;
    //Leaf Node
    if(s==e)
    {
        t[ind]=val;
        return;
    }
    //Left and Right Update
    int mid=(s+e)/2;
    updateNode(s,mid,x,val,2*ind);
    updateNode(mid+1,e,x,val,2*ind+1);
    t[ind]=max(t[2*ind],t[2*ind+1]);
}
void updateRange(int s,int e,int l,int r,int inc,int ind)
{
    //No Overlap
    if(l>e||s>r)
        return;
    //Leaf Node
    if(s==e)
    {
        t[ind]+=inc;
        return;
    }
    //Right and Left Update
    int mid=(s+e)/2;
    updateRange(s,mid,l,r,inc,2*ind);
    updateRange(mid+1,e,l,r,inc,2*ind+1);
    t[ind]=min(t[2*ind],t[2*ind+1]);
}
int queryLazy(int ss,int se,int l,int r,int ind)
{
    //Propagate the lazy of the current node if not zero
    if(lazy[ind])
    {
        t[ind]+=lazy[ind];
        if(ss!=se)
        {
            lazy[2*ind]+=lazy[ind],lazy[2*ind+1]+=lazy[ind];
        }
        lazy[ind]=0;
    }
    //Complete Overlap
    if(ss>=l&&se<=r)
        return t[ind];
    //No Overlap
    if(ss>r||l>se)
        return INT_MAX;
    //Partial Overlap
    int mid=(ss+se)/2;
    int lans=queryLazy(ss,mid,l,r,2*ind),rans=queryLazy(mid+1,se,l,r,2*ind+1);
    return min(lans,rans);
}
void updateRangeLazy(int s,int e,int l,int r,int inc,int ind)
{
    //If there is a lazy value at a node, resolve it before moving ahead
    if(lazy[ind])
    {
        //Updating Current Node
        t[ind]+=lazy[ind];
        //Checking for Leaf Node
        if(s!=e)
            lazy[2*ind]+=lazy[ind],lazy[2*ind+1]+=lazy[ind];
        //Resetting Lazy of Current Node 
        lazy[ind]=0;
    }
    //Out of Bounds
    if(l>e||s>r)
        return;
    //Complete Overlap
    if(s>=l&&e<=r)
    {
        //Update the Current Node
        t[ind]+=inc;
        //Checking for Leaf Node
        if(s!=e)
            lazy[2*ind]+=inc,lazy[2*ind+1]+=inc;
        return;
    }
    //Partial Overlap
    int mid=(s+e)/2;
    updateRangeLazy(s,mid,l,r,inc,2*ind);
    updateRangeLazy(mid+1,e,l,r,inc,2*ind+1);
    t[ind]=min(t[2*ind],t[2*ind+1]); 
}
vector<int> v;
int32_t main()
{
    IOS;
    cin>>tt;
    while(tt--)
    {
        cin>>n>>q;
        if(n<=1e5)
        {
            int s=0;
            for(int i=1;i<=n;i++)
                a[i]=i;
            BuildTree(1,n,1);
            while(q--)
            {
                cin>>x;
                if(x==1)
                {
                    cin>>y;
                    updateNode(1,n,y+s,0,1);
                }
                else
                {
                    cin>>y>>z;
                    int pp=query(1,n,y+s,z+s,1);
                    s+=pp,s%=n;
                    cout<<pp<<endl;
                }
            }
            continue;
        }
        int s=0,fl=0;
        while(q--)
        {
            cin>>x;
            if(x==1)
            {
                cin>>y;
                v.push_back(y);
            }
            else
            {
                if(!fl)
                {
                    fl=1;
                    sort(v.begin(),v.end());
                }
                cin>>y>>z;
                y+=s,z+=s;
                //s+=i,s%=n
                int curans=z;
                for(int i=v.size()-1;i>=0&&curans>=y;i--)
                    if(v[i]==curans)
                        curans--;
                if(curans<y)
                    cout<<0<<endl;
                else
                    cout<<curans<<endl,s+=curans,s%=n;
            }
        }
        v.clear();
    }
    return 0;
}