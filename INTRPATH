#include<bits/stdc++.h>
using namespace std;
#define IOS ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define endl "\n"
#define ll long long
#define int long long
#define double long double
#define pb push_back
#define max(a,b) (a>b?a:b)
#define min(a,b) (a<b?a:b)
#define diff(a,b) (a>b?a-b:b-a)
const int N=1e5+5;
void pairsort(int a[], int b[], int n){
    pair<int, int> pairt[n];
    for (int i = 0; i < n; i++) 
    {
        pairt[i].first = a[i];
        pairt[i].second = b[i];
    }
    sort(pairt, pairt + n);
    for (int i = 0; i < n; i++) 
    {
        a[i] = pairt[i].first;
        b[i] = pairt[i].second;
    }
}
int gcd(int a, int b){
    if (b == 0)
        return a;
    return gcd(b, a % b); 
}
int isPrime(int n){
    if(n < 2)
        return 0;
    if(n < 4)
        return 1;
    if(n % 2 == 0 or n % 3 == 0)
        return 0;
    for(int i = 5; i*i <= n; i += 6)
        if(n % i == 0 or n % (i+2) == 0)
            return 0;
    return 1;
}
long long C(int n, int r) {
    if(r>n-r) 
        r=n-r;
    long long ans=1;
    for(int i=1;i<=r;i++){
        ans*=n-r+i;
        ans/=i;
    }
    return ans;
}
int mod = 1e9+7;
int modexpo(int x,int p){
    int res = 1;
    x = x%mod;
    while(p){
        if(p%2)
            res = res * x;
        p >>= 1;
        x = x*x % mod;
        res %= mod;
    }
    return res;
}
int t,n,q,x,y,sbt[1005][1005],cur=1,vis[1005];
vector<int> v[N],vv;
stack<int> st;
int dfs(int x)
{
    int s=1;
    vis[x]=1;
    for(int i=0;i<v[x].size();i++)
        if(!vis[v[x][i]])
            s+=dfs(v[x][i]);
    return sbt[cur][x]=s;
}
void dfs(int x,int y)
{
    vis[x]=1;
    st.push(x);
    if(x==y)
    {
        while(st.size())
            vv.push_back(st.top()),st.pop();
        for(int i=vv.size()-1;i>=0;i--)
            st.push(vv[i]);
        st.pop();
        return;
    }
    for(int i=0;i<v[x].size();i++)
        if(!vis[v[x][i]])
            dfs(v[x][i],y);
    st.pop();
}
int32_t main()
{
    IOS;
    cin>>t;
    while(t--)
    {
        cur=1;
        cin>>n>>q;
        for(int i=1;i<n;i++)
        {
            cin>>x>>y;
            v[x].push_back(y),v[y].push_back(x);
        }
        for(int i=1;i<=n;i++)
            dfs(i),cur++,memset(vis,0,sizeof(vis));
        while(q--)
        {
            cin>>x>>y;
            dfs(x,y);
            int ans=vv.size();
            if(vv.size()==1)
            {
                int ss=0,i=0;
                for(int j=0;j<v[vv[i]].size();j++)
                    for(int k=0;k<v[vv[i]].size();k++)
                        if(j!=k)
                            ss+=sbt[vv[i]][v[vv[i]][j]]*sbt[vv[i]][v[vv[i]][k]];
                ss/=2;
                for(int j=0;j<v[vv[i]].size();j++)
                    ss+=sbt[vv[i]][v[vv[i]][j]];
                ans+=ss;
                vv.clear(),memset(vis,0,sizeof(vis));
                while(st.size())
                    st.pop();
                cout<<ans<<endl;
                continue;
            }
            for(int i=1;i+1<vv.size();i++)
            {
                int ss=0;
                for(int j=0;j<v[vv[i]].size();j++)
                    for(int k=0;k<v[vv[i]].size();k++)
                        if(j!=k&&v[vv[i]][j]!=vv[i-1]&&v[vv[i]][j]!=vv[i+1]&&v[vv[i]][k]!=vv[i-1]&&v[vv[i]][k]!=vv[i+1])
                            ss+=sbt[vv[i]][v[vv[i]][j]]*sbt[vv[i]][v[vv[i]][k]];
                ss/=2;
                for(int j=0;j<v[vv[i]].size();j++)
                    if(v[vv[i]][j]!=vv[i-1]&&v[vv[i]][j]!=vv[i+1])
                        ss+=sbt[vv[i]][v[vv[i]][j]];
                ans+=ss;
            }
            int ss=0,i=0;
            for(int j=0;j<v[vv[i]].size();j++)
                for(int k=0;k<v[vv[i]].size();k++)
                    if(j!=k&&v[vv[i]][j]!=vv[i+1]&&v[vv[i]][k]!=vv[i+1])
                        ss+=sbt[vv[i]][v[vv[i]][j]]*sbt[vv[i]][v[vv[i]][k]];
            ss/=2;
            for(int j=0;j<v[vv[i]].size();j++)
                if(v[vv[i]][j]!=vv[i+1])
                    ss+=sbt[vv[i]][v[vv[i]][j]];
            ans+=ss;
            ss=0,i=vv.size()-1;
            for(int j=0;j<v[vv[i]].size();j++)
                for(int k=0;k<v[vv[i]].size();k++)
                    if(j!=k&&v[vv[i]][j]!=vv[i-1]&&v[vv[i]][k]!=vv[i-1])
                        ss+=sbt[vv[i]][v[vv[i]][j]]*sbt[vv[i]][v[vv[i]][k]];
            ss/=2;
            for(int j=0;j<v[vv[i]].size();j++)
                if(v[vv[i]][j]!=vv[i-1])
                    ss+=sbt[vv[i]][v[vv[i]][j]];
            ans+=ss;
            cout<<ans<<endl;
            vv.clear(),memset(vis,0,sizeof(vis));
            while(st.size())
                st.pop();
        }
        for(int i=1;i<=n;i++)
            v[i].clear();
        vv.clear();
        while(st.size())
            st.pop();
    }
    return 0;
}