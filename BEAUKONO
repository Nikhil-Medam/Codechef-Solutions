#include<bits/stdc++.h>
using namespace std;
#define IOS ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define endl "\n"
#define ll long long
#define int long long
const int N=1e6+5;
ll max(ll a,ll b)
{
    if(a>=b)
        return a;
    else
        return b;
}
ll min(ll a,ll b)
{
    if(a>=b)
        return b;
    else
        return a;
}
ll diff(ll a,ll b)
{
    if(a>=b)
        return a-b;
    else
        return b-a;
}
void pairsort(int a[], int b[], ll n)
{
    pair<int, int> pairt[n];
 

    for (int i = 0; i < n; i++) 
    {
        pairt[i].first = a[i];
        pairt[i].second = b[i];
    }

    sort(pairt, pairt + n);

    for (int i = 0; i < n; i++) 
    {
        a[i] = pairt[i].first;
        b[i] = pairt[i].second;
    }
}
ll gcd(ll a, ll b)
{
    if (b == 0)
        return a;
    return gcd(b, a % b); 
}
ll rev(ll n)
{
    ll ans=0;
    while(n)
    {
        ans=ans*10+n;
        n=n/10;
    }
    return ans;
}
int isPrime(int n)
{
    for(int i=2;i*i<=n;i++)
        if(n%i==0)
            return 0;
    return 1;        
}
long long C(int n, int r) {
    if(r > n - r) r = n - r; // because C(n, r) == C(n, n - r)
    long long ans = 1;
    int i;

    for(i = 1; i <= r; i++) {
        ans *= n - r + i;
        ans /= i;
    }

    return ans;
}

ll mod = 1e9+7;
ll modexpo(ll x,ll p)
{
    ll res = 1;
    x = x%mod;
    while(p)
    {
        if(p%2)
        {
            res = res * x;
        }
        p >>= 1;
        x = x*x % mod;
        res %= mod;
    }
    return res;
}
int32_t main()
{
    IOS;
    
    ll n,a;
    ll N = 2e5+3;
    ll t;
    ll i =0;
    cin>>t;
    while(t--)
    {
        ll isleaf[N];
        cin>>n;
        for(i=0;i<=n;i++)
        {
            isleaf[i] = 0;
        }
        isleaf[1] = 1;
        ll state[N]={0};
        ll max0=0,max1=0;
        
        ll sum = 1;
        
        cin>>a;
        state[1] = 0;
        isleaf[2]=1;
        state[2] = 1;
        max0=1;
        max1=1;
        
        for(i=3;i<=n+1;i++)
        {
            cin>>a;
            
            if(isleaf[a])
            {
                if(state[a])
                {
                    max1++;
                    max0--;
                    state[i] = 0;
                }
                else
                {
                    max0++;
                    max1--;
                    state[i] = 1;
                }
            }
            else
            {
                if(state[a])
                {
                    max1++;
                    state[i] = 0;
                }
                else
                {
                    max0++;
                    state[i] = 1;
                }
            }
            isleaf[i]=1;
            isleaf[a]=0;
            sum += max(max1,max0);
        }      
        cout<<sum<<endl;
    }
    
    return 0;
}